(self.webpackChunkblog_vuepress=self.webpackChunkblog_vuepress||[]).push([[473],{2958:(s,n,a)=>{"use strict";a.r(n),a.d(n,{data:()=>e});const e={key:"v-207249dc",path:"/git/git-getting-started.html",title:"快速上手",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"准备工作",slug:"准备工作",children:[]},{level:2,title:"常用操作",slug:"常用操作",children:[{level:3,title:"git clone",slug:"git-clone",children:[]},{level:3,title:"git config",slug:"git-config",children:[]},{level:3,title:"git branch",slug:"git-branch",children:[]},{level:3,title:"git checkout",slug:"git-checkout",children:[]},{level:3,title:"git status",slug:"git-status",children:[]},{level:3,title:"git add",slug:"git-add",children:[]},{level:3,title:"git commit",slug:"git-commit",children:[]},{level:3,title:"git push",slug:"git-push",children:[]},{level:3,title:"git pull",slug:"git-pull",children:[]},{level:3,title:"git log",slug:"git-log",children:[]},{level:3,title:"git tag",slug:"git-tag",children:[]},{level:3,title:".gitignore",slug:"gitignore",children:[]},{level:3,title:"小结",slug:"小结",children:[]}]}],filePathRelative:"git/git-getting-started.md",git:{updatedTime:1621846301e3}}},3754:(s,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>k});var e=a(6252);const t=(0,e.Wm)("h1",{id:"快速上手"},[(0,e.Wm)("a",{class:"header-anchor",href:"#快速上手"},"#"),(0,e.Uk)(" 快速上手")],-1),i=(0,e.Wm)("h2",{id:"准备工作"},[(0,e.Wm)("a",{class:"header-anchor",href:"#准备工作"},"#"),(0,e.Uk)(" 准备工作")],-1),l=(0,e.Uk)("进入"),c={href:"https://git-scm.com/",target:"_blank",rel:"noopener noreferrer"},p=(0,e.Uk)("Git官网"),o=(0,e.Uk)("下载合适你的安装包，安装好Git后，系统桌面右键"),r=(0,e.Wm)("code",null,"Git Bash Here",-1),u=(0,e.Uk)("打开命令行工具，新建并进入demo文件夹。"),d=(0,e.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">mkdir</span> demo\n<span class="token builtin class-name">cd</span> demo\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),g=(0,e.Uk)("进入"),b={href:"https://github.com/",target:"_blank",rel:"noopener noreferrer"},m=(0,e.Uk)("Github网站"),h=(0,e.uE)("注册一个账号并登录(账号和邮箱记录下来，后面会用到)，创建仓库：网页右上角<code>+</code>=&gt;<code>New repository</code>=&gt;<code>Repository name *</code>(输入仓库名，如test)=&gt;勾选<code>Add a README file</code>=&gt;<code>Create repository</code>。复制仓库地址：仓库<code>Code</code>=&gt;<code>Clone</code>=&gt;<code>HTTPS</code>=&gt;复制按钮",17),v=(0,e.uE)('<h2 id="常用操作"><a class="header-anchor" href="#常用操作">#</a> 常用操作</h2><p>掌握了以下知识就可以玩转Git，轻松应对90%以上的需求。以下是快速上手的Git命令列表。</p><ul><li>git clone</li><li>git config</li><li>git branch</li><li>git checkout</li><li>git status</li><li>git add</li><li>git commit</li><li>git push</li><li>git pull</li><li>git log</li><li>git tag</li></ul><p>下面将通过对<code>GitHub仓库</code>进行实例操作，讲解如何使用Git拉取代码到提交代码的整个流程。</p><h3 id="git-clone"><a class="header-anchor" href="#git-clone">#</a> git clone</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>从git服务器拉取代码，<code>your-username</code>换成你的注册账号</p></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/your-username/test.git\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>代码下载完成后在当前文件夹中会有一个test的目录，通过<code>cd test</code>命令进入目录。</p><h3 id="git-config"><a class="header-anchor" href="#git-config">#</a> git config</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>配置开发者账号(your-username)和邮箱(your-number@qq.com)</p></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> config user.name your-username\n<span class="token function">git</span> config user.email your-number@qq.com\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>每次代码提交的时候都会生成一条提交记录，其中会包含当前配置的用户名（就是注册账号）和邮箱。</p><h3 id="git-branch"><a class="header-anchor" href="#git-branch">#</a> git branch</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>创建、重命名、查看、删除项目分支，通过Git做项目开发时，一般都是在开发分支中进行，开发完成后合并分支到主干。</p></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> branch daily/0.0.0\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>创建一个名为<code>daily/0.0.0</code>的日常开发分支，分支名只要不包括特殊字符即可。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> branch -m daily/0.0.0 daily/0.0.1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>如果觉得之前的分支名不合适，可以为新建的分支重命名，重命名分支名为<code>daily/0.0.1</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> branch\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>通过不带参数的branch命令可以查看当前项目分支列表</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> branch -d daily/0.0.1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>如果分支已经完成使命则可以通过<code>-d</code>参数将分支删除，这里为了继续下一步操作，暂不执行删除操作</p><h3 id="git-checkout"><a class="header-anchor" href="#git-checkout">#</a> git checkout</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>切换分支</p></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> checkout daily/0.0.1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>切换到<code>daily/0.0.1</code>分支，后续的操作将在这个分支上进行</p><h3 id="git-status"><a class="header-anchor" href="#git-status">#</a> git status</h3><p>查看文件变动状态</p><p>通过任何你喜欢的编辑器对项目中的<code>README.md</code>文件做一些改动，保存。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> status\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>通过<code>git status</code>命令可以看到文件当前状态<code>Changes not staged for commit</code>:（改动文件未提交到暂存区）</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>On branch daily/0.0.1\nChanges not staged <span class="token keyword">for</span> commit:\n  <span class="token punctuation">(</span>use <span class="token string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed<span class="token punctuation">)</span>\n  <span class="token punctuation">(</span>use <span class="token string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="token keyword">in</span> working directory<span class="token punctuation">)</span>\n        modified:   README.md\n\nno changes added to commit <span class="token punctuation">(</span>use <span class="token string">&quot;git add&quot;</span> and/or <span class="token string">&quot;git commit -a&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="git-add"><a class="header-anchor" href="#git-add">#</a> git add</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>添加文件变动到暂存区</p></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> README.md\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>通过指定文件名README.md可以将该文件添加到暂存区，如果想添加所有文件可用<code>git add .</code>命令，这时候可通过<code>git status</code>看到文件当前状态<code>Changes to be committed</code>:（文件已提交到暂存区）</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>On branch daily/0.0.1\nChanges to be committed:\n  <span class="token punctuation">(</span>use <span class="token string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage<span class="token punctuation">)</span>\n        modified:   README.md\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="git-commit"><a class="header-anchor" href="#git-commit">#</a> git commit</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>提交文件变动到版本库</p></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> commit -m <span class="token string">&#39;这里写提交原因&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>通过<code>-m</code>参数可直接在命令行里输入提交描述文本</p><h3 id="git-push"><a class="header-anchor" href="#git-push">#</a> git push</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>将本地的代码改动推送到服务器</p></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> push origin daily/0.0.1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>origin</code>指代的是当前的git服务器地址，这行命令的意思是把<code>daily/0.0.1</code>分支推送到服务器，当看到命令行返回如下字符表示推送成功了。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>Enumerating objects: <span class="token number">5</span>, done.\nCounting objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">5</span>/5<span class="token punctuation">)</span>, done.\nWriting objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">3</span>/3<span class="token punctuation">)</span>, <span class="token number">261</span> bytes <span class="token operator">|</span> <span class="token number">261.00</span> KiB/s, done.\nTotal <span class="token number">3</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, pack-reused <span class="token number">0</span>\nremote:\nremote: Create a pull request <span class="token keyword">for</span> <span class="token string">&#39;daily/0.0.1&#39;</span> on GitHub by visiting:\nremote:      https://github.com/your-username/test/pull/new/daily/0.0.1\nremote:\nTo https://github.com/your-username/test.git\n * <span class="token punctuation">[</span>new branch<span class="token punctuation">]</span>      daily/0.0.1 -<span class="token operator">&gt;</span> daily/0.0.1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>现在我们回到Github网站的项目首页，点击<code>Branch:main</code>下拉按钮，就会看到刚才推送的<code>daily/00.1</code>分支了</p><h3 id="git-pull"><a class="header-anchor" href="#git-pull">#</a> git pull</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>将服务器上的最新代码拉取到本地</p></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> pull origin daily/0.0.1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>如果其它项目成员对项目做了改动并推送到服务器，我们需要将最新的改动更新到本地，这里我们来模拟一下这种情况。</p><p>进入Github网站的项目首页，再进入<code>daily/0.0.1</code>分支，在线对README.md文件做一些修改并保存，然后在命令中执行以上命令，它将把刚才在线修改的部分拉取到本地，用编辑器打开<code>README.md</code>，你会发现文件已经跟线上的内容同步了。</p><p>如果线上代码做了变动，而你本地的代码也有变动，拉取的代码就有可能会跟你本地的改动冲突，一般情况下Git会自动处理这种冲突合并，但如果改动的是同一行，那就需要手动来合并代码，编辑文件，保存最新的改动，再通过<code>git add .</code>和<code>git commit -m &#39;xxx&#39;</code>来提交合并。</p><h3 id="git-log"><a class="header-anchor" href="#git-log">#</a> git log</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>查看版本提交记录</p></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> log\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>通过以上命令，我们可以查看整个项目的版本提交记录，它里面包含了提交人、日期、提交原因等信息，得到的结果如下：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>commit 2602ec32c45ddcb86e6d292c3113ed759e5449ec <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> daily/0.0.1, origin/daily/0.0.1<span class="token punctuation">)</span>\nAuthor: your-username <span class="token operator">&lt;</span>your-number@qq.com<span class="token operator">&gt;</span>\nDate:   Fri May <span class="token number">21</span> 01:27:20 <span class="token number">2021</span> +0000\n\n    Update README.md\n\ncommit cd12ef0a3f11fa12f3a57c4f4a9ee0c63441d305\nAuthor: your-username <span class="token operator">&lt;</span>your-number@qq.com<span class="token operator">&gt;</span>\nDate:   Fri May <span class="token number">21</span> 09:22:22 <span class="token number">2021</span> +0800\n\n    测试\n\ncommit 026c2bd90a5697ddae1b25533d9b1004a9bf3473 <span class="token punctuation">(</span>origin/main, origin/HEAD, main<span class="token punctuation">)</span>\nAuthor: your-username <span class="token operator">&lt;</span>your-number@qq.com<span class="token operator">&gt;</span>\nDate:   Fri May <span class="token number">21</span> 01:07:45 <span class="token number">2021</span> +0000\n\n    Create README.md\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>提交记录可能会非常多，按J键往下翻，按K键往上翻，按Q键退出查看</p><h3 id="git-tag"><a class="header-anchor" href="#git-tag">#</a> git tag</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>为项目标记里程碑</p></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> tag publish/0.0.1\n<span class="token function">git</span> push origin publish/0.0.1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>当我们完成某个功能需求准备发布上线时，应该将此次完整的项目代码做个标记，并将这个标记好的版本发布到线上，这里我们以publish/0.0.1为标记名并发布，当看到命令行返回如下内容则表示发布成功了</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>Total <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, pack-reused <span class="token number">0</span>\nTo https://github.com/your-username/test.git\n * <span class="token punctuation">[</span>new tag<span class="token punctuation">]</span>         publish/0.0.1 -<span class="token operator">&gt;</span> publish/0.0.1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="gitignore"><a class="header-anchor" href="#gitignore">#</a> .gitignore</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>设置哪些内容不需要推送到服务器，这是一个配置文件</p></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">touch</span> .gitignore\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>.gitignore</code>不是Git命令，而在项目中的一个文件，通过设置<code>.gitignore</code>的内容告诉Git哪些文件应该被忽略不需要推送到服务器，通过以上命令可以创建一个<code>.gitignore</code>文件，并在编辑器中打开文件，每一行代表一个要忽略的文件或目录，如：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>demo.html\nbuild/\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>以上内容的意思是Git将忽略<code>demo.html文件</code>和<code>build/</code>目录，这些内容不会被推送到服务器上</p><h3 id="小结"><a class="header-anchor" href="#小结">#</a> 小结</h3><p>通过掌握以上这些基本命令就可以在项目中开始用起来了，如果追求实用，那关于Git的学习就可以到此结束了，偶尔遇到的问题也基本上通过Google也能找到答案，如果想深入探索Git的高阶功能，那就继续往下看深入探索部分。</p>',72),k={render:function(s,n){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[t,i,(0,e.Wm)("p",null,[l,(0,e.Wm)("a",c,[p,(0,e.Wm)(a)]),o,r,u]),d,(0,e.Wm)("p",null,[g,(0,e.Wm)("a",b,[m,(0,e.Wm)(a)]),h]),v],64)}}}}]);